{"version":3,"sources":["aerostat.jpg","Image.jsx","listItem.jsx","City-List.jsx","container.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Image","console","log","this","props","weather","className","style","background","Airship","backgroundSize","backgroundPosition","map","city","key","request","query","current","temperature","src","weather_icons","alt","Component","ListItem","onClick","handleClick","name","CityList","cities","Container","fetch","then","data","json","result","setState","state","React","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,sC,kNCGtBC,E,iLAKjB,OAFEC,QAAQC,IAAI,MAAOC,KAAKC,MAAMC,SAG9B,yBACEC,UAAU,QACVC,MAAO,CACLC,WAAW,OAAD,OAASC,IAAT,KACVC,eAAgB,QAChBC,mBAAoB,WAGrBR,KAAKC,MAAMC,QAAQO,KAAI,SAAAC,GAAI,OAC1B,yBAAKC,IAAKD,EAAKE,QAAQC,OACrB,4BAAKH,EAAKE,QAAQC,OAClB,4BAAKH,EAAKI,QAAQC,YAAlB,QACA,yBAAKC,IAAKN,EAAKI,QAAQG,cAAc,GAAIC,IAAI,iB,GAlBtBC,aCDdC,E,iLACP,IAAD,OACL,OACG,wBAAIC,QAAS,kBAAI,EAAKpB,MAAMqB,YAAY,EAAKrB,MAAMsB,QAAQvB,KAAKC,MAAMsB,U,GAH3CJ,aCCjBK,E,iLACT,IAAD,OACP,OACE,yBAAKrB,UAAU,YACb,4BACGH,KAAKC,MAAMwB,OAAOhB,KAAI,SAACC,EAAMC,GAAP,OACrB,kBAAC,EAAD,CACEA,IAAKA,EACLY,KAAMb,EACNY,YAAa,EAAKrB,MAAMqB,uB,GATAH,aCCjBO,E,YACnB,aAAe,IAAD,8BACZ,+CAOFJ,YAAc,SAAAC,GACZI,MAAM,yFAAD,OACsFJ,IAExFK,MAAK,SAAAC,GACJ,OAAOA,EAAKC,UAEbF,MAAK,SAAAG,GACJjC,QAAQC,IAAIgC,GACZ,EAAKC,SAAS,CACZ9B,QAAS,CAAC6B,SAhBhB,EAAKE,MAAQ,CACXvB,KAAM,OACNe,OAAQ,CAAC,OAAQ,SAAU,SAC3BvB,QAAS,IALC,E,iFAsBO,IAAD,OAClByB,MAAM,yFAAD,OACsF3B,KAAKiC,MAAMvB,OAEnGkB,MAAK,SAAAC,GACJ,OAAOA,EAAKC,UAEbF,MAAK,SAAAG,GACJjC,QAAQC,IAAIgC,EAAOnB,QAAQC,OAE3B,EAAKmB,SAAS,CACZ9B,QAAS,CAAC6B,U,+BAKhB,OACE,yBAAK5B,UAAU,aACb,kBAAC,EAAD,CAAOD,QAASF,KAAKiC,MAAM/B,UAC3B,kBAAC,EAAD,CAAUuB,OAAQzB,KAAKiC,MAAMR,OAAQH,YAAatB,KAAKsB,mB,GA1CxBY,IAAMf,WCQ9BgB,MARf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,QCKciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.add3413e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/aerostat.7de9a516.jpg\";","import React, { Component } from \"react\";\r\nimport Airship from \"./aerostat.jpg\";\r\n\r\nexport default class Image extends Component {\r\n  render() {\r\n    {\r\n      console.log(\"obj\", this.props.weather);\r\n    }\r\n    return (\r\n      <div\r\n        className=\"image\"\r\n        style={{\r\n          background: `url(${Airship})`,\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"center\"\r\n        }}\r\n      >\r\n        {this.props.weather.map(city => (\r\n          <div key={city.request.query}>\r\n            <h1>{city.request.query}</h1>\r\n            <h3>{city.current.temperature}&#176;</h3>\r\n            <img src={city.current.weather_icons[0]} alt=\"img\" />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ListItem extends Component {\r\n    render() {\r\n        return (\r\n           <li onClick={()=>this.props.handleClick(this.props.name)}>{this.props.name}</li>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ListItem from \"./listItem\";\r\n\r\nexport default class CityList extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"list-div\">\r\n        <ul>\r\n          {this.props.cities.map((city, key) => (\r\n            <ListItem\r\n              key={key}\r\n              name={city}\r\n              handleClick={this.props.handleClick}\r\n            />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Image from \"./Image.jsx\";\r\nimport CityList from \"./City-List\";\r\n\r\nexport default class Container extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      city: \"Aden\",\r\n      cities: [\"Aden\", \"Sana'a\", \"Cairo\"],\r\n      weather: []\r\n    };\r\n  }\r\n  handleClick = name => {\r\n    fetch(\r\n      `http://api.weatherstack.com/current?access_key=9c5d884fbb53e36a3f2351ef8152fc08&query=${name}`\r\n    )\r\n      .then(data => {\r\n        return data.json();\r\n      })\r\n      .then(result => {\r\n        console.log(result);\r\n        this.setState({\r\n          weather: [result]\r\n        });\r\n      });\r\n  };\r\n  componentDidMount() {\r\n    fetch(\r\n      `http://api.weatherstack.com/current?access_key=9c5d884fbb53e36a3f2351ef8152fc08&query=${this.state.city}`\r\n    )\r\n      .then(data => {\r\n        return data.json();\r\n      })\r\n      .then(result => {\r\n        console.log(result.request.query);\r\n\r\n        this.setState({\r\n          weather: [result]\r\n        });\r\n      });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Image weather={this.state.weather} />\r\n        <CityList cities={this.state.cities} handleClick={this.handleClick} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Container from \"./container\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Container />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}